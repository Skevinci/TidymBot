"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class pid_values_t(object):
    __slots__ = ["motor_a_kp", "motor_a_ki", "motor_a_kd", "motor_a_Tf", "motor_b_kp", "motor_b_ki", "motor_b_kd", "motor_b_Tf", "motor_c_kp", "motor_c_ki", "motor_c_kd", "motor_c_Tf", "bf_trans_kp", "bf_trans_ki", "bf_trans_kd", "bf_trans_Tf", "bf_rot_kp", "bf_rot_ki", "bf_rot_kd", "bf_rot_Tf"]

    __typenames__ = ["float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.motor_a_kp = 0.0
        self.motor_a_ki = 0.0
        self.motor_a_kd = 0.0
        self.motor_a_Tf = 0.0
        self.motor_b_kp = 0.0
        self.motor_b_ki = 0.0
        self.motor_b_kd = 0.0
        self.motor_b_Tf = 0.0
        self.motor_c_kp = 0.0
        self.motor_c_ki = 0.0
        self.motor_c_kd = 0.0
        self.motor_c_Tf = 0.0
        self.bf_trans_kp = 0.0
        self.bf_trans_ki = 0.0
        self.bf_trans_kd = 0.0
        self.bf_trans_Tf = 0.0
        self.bf_rot_kp = 0.0
        self.bf_rot_ki = 0.0
        self.bf_rot_kd = 0.0
        self.bf_rot_Tf = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(pid_values_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ffffffffffffffffffff", self.motor_a_kp, self.motor_a_ki, self.motor_a_kd, self.motor_a_Tf, self.motor_b_kp, self.motor_b_ki, self.motor_b_kd, self.motor_b_Tf, self.motor_c_kp, self.motor_c_ki, self.motor_c_kd, self.motor_c_Tf, self.bf_trans_kp, self.bf_trans_ki, self.bf_trans_kd, self.bf_trans_Tf, self.bf_rot_kp, self.bf_rot_ki, self.bf_rot_kd, self.bf_rot_Tf))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != pid_values_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pid_values_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = pid_values_t()
        self.motor_a_kp, self.motor_a_ki, self.motor_a_kd, self.motor_a_Tf, self.motor_b_kp, self.motor_b_ki, self.motor_b_kd, self.motor_b_Tf, self.motor_c_kp, self.motor_c_ki, self.motor_c_kd, self.motor_c_Tf, self.bf_trans_kp, self.bf_trans_ki, self.bf_trans_kd, self.bf_trans_Tf, self.bf_rot_kp, self.bf_rot_ki, self.bf_rot_kd, self.bf_rot_Tf = struct.unpack(">ffffffffffffffffffff", buf.read(80))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if pid_values_t in parents: return 0
        tmphash = (0xbdbad1235b5e51cd) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if pid_values_t._packed_fingerprint is None:
            pid_values_t._packed_fingerprint = struct.pack(">Q", pid_values_t._get_hash_recursive([]))
        return pid_values_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", pid_values_t._get_packed_fingerprint())[0]


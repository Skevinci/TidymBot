"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class exploration_status_t(object):
    __slots__ = ["utime", "team_number", "state", "status"]

    __typenames__ = ["int64_t", "int32_t", "int8_t", "int8_t"]

    __dimensions__ = [None, None, None, None]

    STATE_INITIALIZING = 0
    STATE_EXPLORING_MAP = 1
    STATE_RETURNING_HOME = 2
    STATE_COMPLETED_EXPLORATION = 3
    STATE_FAILED_EXPLORATION = 4
    STATUS_IN_PROGRESS = 0
    STATUS_COMPLETE = 1
    STATUS_FAILED = 2

    def __init__(self):
        self.utime = 0
        self.team_number = 0
        self.state = 0
        self.status = 0

    def encode(self):
        buf = BytesIO()
        buf.write(exploration_status_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qibb", self.utime, self.team_number, self.state, self.status))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != exploration_status_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return exploration_status_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = exploration_status_t()
        self.utime, self.team_number, self.state, self.status = struct.unpack(">qibb", buf.read(14))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if exploration_status_t in parents: return 0
        tmphash = (0x46cc0600966c2be3) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if exploration_status_t._packed_fingerprint is None:
            exploration_status_t._packed_fingerprint = struct.pack(">Q", exploration_status_t._get_hash_recursive([]))
        return exploration_status_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", exploration_status_t._get_packed_fingerprint())[0]

